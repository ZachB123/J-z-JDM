"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateGuard: function() {
        return generateGuard;
    },
    isGuardTest: function() {
        return isGuardTest;
    },
    isGuardTests: function() {
        return isGuardTests;
    },
    isGuardTestGroups: function() {
        return isGuardTestGroups;
    }
});
var _lodash = /*#__PURE__*/ _interopRequireDefault(require("lodash"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var generateGuard = function() {
    for(var _len = arguments.length, testGroups = new Array(_len), _key = 0; _key < _len; _key++){
        testGroups[_key] = arguments[_key];
    }
    if (testGroups.length < 1) {
        return function() {
            return false;
        };
    }
    return function(maybe) {
        return _lodash.default.some(testGroups, function(tests) {
            var _$_;
            var safeTests = _lodash.default.castArray(tests);
            if (safeTests.length < 1) {
                return false;
            }
            return _lodash.default.every((_$_ = _lodash.default).over.apply(_$_, _toConsumableArray(safeTests))(maybe), function(result) {
                return result === true;
            });
        });
    };
};
var isGuardTest = generateGuard([
    _lodash.default.isFunction,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function(maybe) {
        return _lodash.default.isFunction(maybe) && _lodash.default.isBoolean(maybe("something"));
    }
]);
var isGuardTests = generateGuard([
    _lodash.default.isArray,
    function(maybe) {
        return _lodash.default.every(maybe, isGuardTest);
    }
]);
var isGuardTestGroups = generateGuard([
    _lodash.default.isArray,
    function(maybe) {
        return _lodash.default.every(maybe, function(testGroup) {
            return isGuardTest(testGroup) || isGuardTests(testGroup);
        });
    }
]);
