"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "translate", {
    enumerable: true,
    get: function() {
        return translate;
    }
});
var _generateGuard = require("../utils/generate-guard");
var _lodash = /*#__PURE__*/ _interopRequireDefault(require("lodash"));
var _cssValue = require("../utils/css-value");
var _dimension = require("../utils/dimension");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Translate = function Translate() {
    "use strict";
    var _this = this;
    _classCallCheck(this, Translate);
    this.isProcessableValue = (0, _generateGuard.generateGuard)(_lodash.default.isString, _lodash.default.isUndefined);
    this.isProcessableValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isProcessableValue);
        }
    ]);
    this.isValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _lodash.default.isString);
        }
    ]);
    this.normaliseValues = function(values) {
        return _this.isProcessableValues(values) ? _lodash.default.chain(values).mapValues(function(duration) {
            return (0, _cssValue.normaliseLengthPercentageValue)(duration);
        }).pickBy(function(duration, modifier) {
            return _lodash.default.isString(modifier) && modifier !== "" && _lodash.default.isString(duration);
        }).value() : {};
    };
    this.defaultFunctionValues = {
        translateX: "var(--tw-translate-x)",
        translateY: "var(--tw-translate-y)",
        translateZ: "var(--tw-translate-z)"
    };
    this.normaliseFunctionValues = function() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dimension = _ref.dimension, translateX = _ref.translateX, translateY = _ref.translateY, translateZ = _ref.translateZ;
        var safeValues = [
            (0, _cssValue.normaliseLengthPercentageValue)(translateX, _this.defaultFunctionValues.translateX),
            (0, _cssValue.normaliseLengthPercentageValue)(translateY, _this.defaultFunctionValues.translateY)
        ];
        if ((0, _dimension.normaliseDimension)(dimension) === "3d") {
            safeValues.push((0, _cssValue.normaliseLengthValue)(translateZ, _this.defaultFunctionValues.translateZ));
        }
        return safeValues.join(" ");
    };
    this.utilities = function(param) {
        var matchUtilities = param.matchUtilities, theme = param.theme;
        var functionValues = _this.normaliseFunctionValues();
        var values = _this.normaliseValues(theme("translate"));
        matchUtilities({
            "translate-x": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-translate-x": value,
                    translate: functionValues
                };
            },
            "translate-y": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-translate-y": value,
                    translate: functionValues
                };
            }
        }, {
            values: values,
            supportsNegativeValues: true
        });
        matchUtilities({
            "translate-z": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-translate-z": value,
                    translate: functionValues
                };
            }
        }, {
            values: _lodash.default.pickBy(values, function(value) {
                return !value.endsWith("%");
            }),
            supportsNegativeValues: true
        });
    };
};
var translate = new Translate();
