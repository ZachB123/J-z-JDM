"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transform", {
    enumerable: true,
    get: function() {
        return transform;
    }
});
var _dimension = require("../utils/dimension");
var _cssValue = require("../utils/css-value");
var _lodash = /*#__PURE__*/ _interopRequireDefault(require("lodash"));
var _generateGuard = require("../utils/generate-guard");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Transform = function Transform() {
    "use strict";
    var _this = this;
    _classCallCheck(this, Transform);
    this.isProcessableValue = (0, _generateGuard.generateGuard)(_lodash.default.isString, _lodash.default.isUndefined);
    this.isProcessableValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isProcessableValue);
        }
    ]);
    this.isValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _lodash.default.isString);
        }
    ]);
    this.normaliseValues = function(values) {
        return _this.isProcessableValues(values) ? _lodash.default.chain(values).mapValues(function(angle) {
            return (0, _cssValue.normaliseAngleValue)(angle);
        }).pickBy(function(angle, modifier) {
            return _lodash.default.isString(modifier) && modifier !== "" && _lodash.default.isString(angle);
        }).value() : {};
    };
    this.defaultFunctionValues = {
        rotateX: "var(--tw-rotate-x)",
        rotateY: "var(--tw-rotate-y)",
        skewX: "var(--tw-skew-x)",
        skewY: "var(--tw-skew-y)"
    };
    this.normaliseFunctionValues = function() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dimension = _ref.dimension, rotateX = _ref.rotateX, rotateY = _ref.rotateY, skewX = _ref.skewX, skewY = _ref.skewY;
        var safeDimension = (0, _dimension.normaliseDimension)(dimension);
        var safeValues = {
            rotateX: (0, _cssValue.normaliseAngleValue)(rotateX, _this.defaultFunctionValues.rotateX),
            rotateY: (0, _cssValue.normaliseAngleValue)(rotateY, _this.defaultFunctionValues.rotateY),
            skewX: (0, _cssValue.normaliseAngleValue)(skewX, _this.defaultFunctionValues.skewX),
            skewY: (0, _cssValue.normaliseAngleValue)(skewY, _this.defaultFunctionValues.skewY)
        };
        return [
            {
                "3d": "rotateX(".concat(safeValues.rotateX, ") rotateY(").concat(safeValues.rotateY, ")"),
                "2d": ""
            },
            "skewX(".concat(safeValues.skewX, ")"),
            "skewY(".concat(safeValues.skewY, ")")
        ].map(function(value) {
            return _lodash.default.isString(value) ? value : value[safeDimension];
        }).join(" ");
    };
    this.utilities = function(param) {
        var matchUtilities = param.matchUtilities, theme = param.theme;
        var functionValues = _this.normaliseFunctionValues();
        var rotateValues = _this.normaliseValues(theme("rotate"));
        var skewValues = _this.normaliseValues(theme("skew"));
        matchUtilities({
            rotate: function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-rotate-z": value,
                    rotate: "var(--tw-rotate-z)"
                };
            },
            "rotate-x": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-rotate-x": value,
                    transform: functionValues
                };
            },
            "rotate-y": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-rotate-y": value,
                    transform: functionValues
                };
            },
            "rotate-z": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-rotate-z": value,
                    rotate: "var(--tw-rotate-z)"
                };
            }
        }, {
            values: rotateValues,
            supportsNegativeValues: true
        });
        matchUtilities({
            "skew-x": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-skew-x": value,
                    transform: functionValues
                };
            },
            "skew-y": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-skew-y": value,
                    transform: functionValues
                };
            }
        }, {
            values: skewValues,
            supportsNegativeValues: true
        });
    };
};
var transform = new Transform();
