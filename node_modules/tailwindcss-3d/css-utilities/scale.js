"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "scale", {
    enumerable: true,
    get: function() {
        return scale;
    }
});
var _generateGuard = require("../utils/generate-guard");
var _lodash = /*#__PURE__*/ _interopRequireDefault(require("lodash"));
var _cssValue = require("../utils/css-value");
var _dimension = require("../utils/dimension");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Scale = function Scale() {
    "use strict";
    var _this = this;
    _classCallCheck(this, Scale);
    this.isProcessableValue = (0, _generateGuard.generateGuard)([
        _lodash.default.isString
    ], [
        _lodash.default.isUndefined
    ]);
    this.isProcessableValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isProcessableValue);
        }
    ]);
    this.isValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _lodash.default.isString);
        }
    ]);
    this.normaliseValues = function(values) {
        return _this.isProcessableValues(values) ? _lodash.default.chain(values).mapValues(function(length) {
            return (0, _cssValue.normaliseNumberPercentageValue)(length, "1", {
                lowerLimit: 0
            });
        }).pickBy(function(length, modifier) {
            return _lodash.default.isString(modifier) && modifier !== "" && _lodash.default.isString(length);
        }).value() : {};
    };
    this.defaultFunctionValues = {
        scaleX: "var(--tw-scale-x)",
        scaleY: "var(--tw-scale-y)",
        scaleZ: "var(--tw-scale-z)"
    };
    this.normaliseFunctionValues = function() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dimension = _ref.dimension, scaleX = _ref.scaleX, scaleY = _ref.scaleY, scaleZ = _ref.scaleZ;
        var safeValues = [
            (0, _cssValue.normaliseNumberPercentageValue)(scaleX, _this.defaultFunctionValues.scaleX, {
                lowerLimit: 0
            }),
            (0, _cssValue.normaliseNumberPercentageValue)(scaleY, _this.defaultFunctionValues.scaleY, {
                lowerLimit: 0
            })
        ];
        if ((0, _dimension.normaliseDimension)(dimension) === "3d") {
            safeValues.push((0, _cssValue.normaliseNumberPercentageValue)(scaleZ, _this.defaultFunctionValues.scaleZ, {
                lowerLimit: 0
            }));
        }
        return safeValues.join(" ");
    };
    this.utilities = function(param) {
        var matchUtilities = param.matchUtilities, theme = param.theme;
        var functionValues = _this.normaliseFunctionValues();
        var values = _this.normaliseValues(theme("scale"));
        matchUtilities({
            scale: function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-scale-x": value,
                    "--tw-scale-y": value,
                    scale: functionValues
                };
            },
            scale3d: function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-scale-x": value,
                    "--tw-scale-y": value,
                    "--tw-scale-z": value,
                    scale: functionValues
                };
            },
            "scale-x": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-scale-x": value,
                    scale: functionValues
                };
            },
            "scale-y": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-scale-y": value,
                    scale: functionValues
                };
            },
            "scale-z": function(value) {
                return {
                    "@defaults transform": {},
                    "--tw-scale-z": value,
                    scale: functionValues
                };
            }
        }, {
            values: values,
            supportsNegativeValues: true
        });
    };
};
var scale = new Scale();
