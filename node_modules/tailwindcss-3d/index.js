"use strict";
var _plugin = /*#__PURE__*/ _interopRequireDefault(require("tailwindcss/plugin"));
var _perspective = require("./css-utilities/perspective");
var _transformStyle = require("./css-utilities/transform-style");
var _translate = require("./css-utilities/translate");
var _transform = require("./css-utilities/transform");
var _scale = require("./css-utilities/scale");
var _backface = require("./css-utilities/backface");
var _perspectiveOrigin = require("./css-utilities/perspective-origin");
var _transformBox = require("./css-utilities/transform-box");
var _transformCore = require("./css-utilities/transform-core");
var _spin = require("./css-animations/spin");
var _bounce = require("./css-animations/bounce");
var _bounceAndSpin = require("./css-animations/bounce-and-spin");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
// Default CSS variables, modelled from core
var DEFAULT_VARIABLE_VALUES = {
    "--tw-perspective:": "none",
    "--tw-translate-x": "0",
    "--tw-translate-y": "0",
    "--tw-translate-z": "0",
    "--tw-rotate-x": "0",
    "--tw-rotate-y": "0",
    "--tw-rotate-z": "0",
    "--tw-skew-x": "0",
    "--tw-skew-y": "0",
    "--tw-scale-x": "1",
    "--tw-scale-y": "1",
    "--tw-scale-z": "1"
};
var tailwindcss3d = (0, _plugin.default)(function(api) {
    var localAPI = api;
    // Replace the transform core plugin defaults and add some new ones
    localAPI.addDefaults("transform", DEFAULT_VARIABLE_VALUES);
    // New CSS Utilities
    _perspective.perspective.utilities(localAPI);
    _transformStyle.transformStyle.utilities(localAPI);
    _translate.translate.utilities(localAPI);
    _transform.transform.utilities(localAPI);
    _scale.scale.utilities(localAPI);
    _backface.backface.utilities(localAPI);
    _perspectiveOrigin.perspectiveOrigin.utilities(localAPI);
    _transformBox.transformBox.utilities(localAPI);
    _transformCore.transformCore.utilities(localAPI);
}, {
    theme: {
        // Set new theme defaults
        perspective: _perspective.perspective.defaultTheme,
        transformStyle: _transformStyle.transformStyle.defaultTheme,
        backface: _backface.backface.defaultTheme,
        perspectiveOrigin: _perspectiveOrigin.perspectiveOrigin.defaultTheme,
        transformBox: _transformBox.transformBox.defaultTheme,
        spin: _spin.spin.defaultTheme,
        bounce: _bounce.bounce.defaultTheme,
        bounceAndSpin: _bounceAndSpin.bounceAndSpin.defaultTheme,
        extend: {
            // Update the core transform transition property
            transitionProperty: {
                transform: "perspective, translate, scale, transform, perspective, rotate"
            },
            // New CSS keyframes and animations
            keyframes: function(pluginUtilities) {
                return _objectSpread({}, _spin.spin.keyframes(), _bounce.bounce.keyframes(pluginUtilities), _bounceAndSpin.bounceAndSpin.keyframes(pluginUtilities));
            },
            animation: function(pluginUtilities) {
                return _objectSpread({}, _spin.spin.animation(pluginUtilities), _bounce.bounce.animation(pluginUtilities), _bounceAndSpin.bounceAndSpin.animation(pluginUtilities));
            }
        }
    },
    // Disable some core plugins which are superceded by this plugin
    corePlugins: {
        rotate: false,
        scale: false,
        skew: false,
        transform: false,
        translate: false
    }
});
module.exports = tailwindcss3d;
