"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "bounceAndSpin", {
    enumerable: true,
    get: function() {
        return bounceAndSpin;
    }
});
var _generateGuard = require("../utils/generate-guard");
var _lodash = /*#__PURE__*/ _interopRequireDefault(require("lodash"));
var _cssValue = require("../utils/css-value");
var _defaultTheme = /*#__PURE__*/ _interopRequireDefault(require("tailwindcss/defaultTheme"));
var _translate = require("../css-utilities/translate");
var _transform = require("../css-utilities/transform");
var _lodashTransformers = require("../utils/lodash-transformers");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpreadProps(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var BounceAndSpin = function BounceAndSpin() {
    "use strict";
    var _this = this;
    _classCallCheck(this, BounceAndSpin);
    this.isProcessablePrimitive = (0, _generateGuard.generateGuard)(_lodash.default.isString, _lodash.default.isUndefined);
    this.isProcessableValue = (0, _generateGuard.generateGuard)([
        _lodash.default.isArray,
        function(maybe) {
            return maybe.length === 2;
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isProcessablePrimitive);
        }
    ]);
    this.isProcessableValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isProcessableValue);
        }
    ]);
    this.isValue = (0, _generateGuard.generateGuard)([
        _lodash.default.isArray,
        function(maybe) {
            return maybe.length === 2;
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _lodash.default.isString);
        }
    ]);
    this.isValues = (0, _generateGuard.generateGuard)([
        _lodash.default.isPlainObject,
        function(maybe) {
            return _lodash.default.every(_lodash.default.keys(maybe), _lodash.default.isString);
        },
        function(maybe) {
            return _lodash.default.every(_lodash.default.values(maybe), _this.isValue);
        }
    ]);
    this.normaliseValues = function(values) {
        var _normaliseNumberValue;
        return _this.isProcessableValues(values) ? _lodash.default.chain(values).mapKeys(function(_value, modifier) {
            return (_normaliseNumberValue = (0, _cssValue.normaliseNumberValue)(modifier)) !== null && _normaliseNumberValue !== void 0 ? _normaliseNumberValue : "";
        }).mapValues(function(param) {
            var _param = _slicedToArray(param, 2), duration = _param[0], distance = _param[1];
            return [
                (0, _cssValue.normaliseTimeValue)(duration),
                (0, _cssValue.normaliseLengthPercentageValue)(distance)
            ];
        }).pickBy(function(value, modifier) {
            var _value = _slicedToArray(value, 2), duration = _value[0], distance = _value[1];
            return _lodash.default.isString(modifier) && modifier !== "" && _lodash.default.isString(duration) && _lodash.default.isString(distance);
        }).value() : {};
    };
    this.defaultTheme = this.normaliseValues(_lodash.default.chain(_defaultTheme.default.spacing).transform((0, _lodashTransformers.addDurationWithGravity)(), {}).mapValues(function(param) {
        var distance = param.value, duration = param.duration;
        return [
            duration,
            distance
        ];
    }).value());
    this.keyframes = function(param) {
        var theme = param.theme;
        var values = _this.normaliseValues(theme("bounceAndSpin"));
        var rotateProperties = function(axis, value) {
            var rotateProperty = "rotate".concat(axis.toUpperCase());
            if (axis === "z") {
                return {
                    rotate: value
                };
            }
            var transformProperty = _transform.transform.normaliseFunctionValues(_defineProperty({}, rotateProperty, value));
            return {
                "-webkit-transform": transformProperty,
                transform: transformProperty
            };
        };
        return _lodash.default.chain(values).transform((0, _lodashTransformers.axesModifier)()).transform((0, _lodashTransformers.nameModifier)("bounce-and-spin")).transform((0, _lodashTransformers.signModifier)()).mapValues(function(param) {
            var _param_value = _slicedToArray(param.value, 2), _duration = _param_value[0], distance = _param_value[1], axis = param.axis, sign = param.sign;
            var translateProperty = "translate".concat(axis.toUpperCase());
            return {
                "0%, 100%": {
                    translate: _translate.translate.normaliseFunctionValues(_defineProperty({}, translateProperty, "0")),
                    animationTimingFunction: "cubic-bezier(0, 0, 0.2, 1)"
                },
                "0%, 5%": _objectSpreadProps(_objectSpread({}, rotateProperties(axis, "0deg")), {
                    animationTimingFunction: "ease-in"
                }),
                "50%": {
                    translate: _translate.translate.normaliseFunctionValues(_defineProperty({}, translateProperty, "".concat(sign).concat(distance))),
                    animationTimingFunction: "cubic-bezier(0.8, 0, 1, 1)"
                },
                "50.1%": _objectSpreadProps(_objectSpread({}, rotateProperties(axis, "".concat(sign, "180deg"))), {
                    animationTimingFunction: "linear"
                }),
                "95%, 100%": _objectSpreadProps(_objectSpread({}, rotateProperties(axis, "".concat(sign, "360deg"))), {
                    animationTimingFunction: "ease-out"
                })
            };
        }).value();
    };
    this.animation = function(param) {
        var theme = param.theme;
        var values = _this.normaliseValues(theme("bounceAndSpin"));
        if (!_this.isValues(values)) {
            return {};
        }
        return _lodash.default.chain(values).transform((0, _lodashTransformers.axesModifier)()).transform((0, _lodashTransformers.nameModifier)("bounce-and-spin")).transform((0, _lodashTransformers.signModifier)()).mapValues(function(param, modifier) {
            var _param_value = _slicedToArray(param.value, 1), duration = _param_value[0];
            return "".concat(modifier, " ").concat(duration, " infinite");
        }).value();
    };
};
var bounceAndSpin = new BounceAndSpin();
